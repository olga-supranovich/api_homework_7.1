{
	"info": {
		"_postman_id": "c98e4ecf-8162-4da8-8983-8e3f87b8539f",
		"name": "Change task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "27247429-c98e4ecf-8162-4da8-8983-8e3f87b8539f"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "888408bc-aae7-4e7c-b34e-826beba5855b",
						"exec": [
							"let jsonData = pm.response.json();",
							"let moment = require('moment');",
							"let createdTaskDate = moment(pm.response.headers.get('Date')).utc().format('LLL');",
							"let currentDate = pm.variables.get('currentDate');",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    pm.response.to.have.header(\"Date\");",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    pm.response.to.have.header(\"Content-Encoding\");",
							"});",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    pm.expect(jsonData).to.exist;",
							"});",
							"",
							"pm.test(\"Date in response header is correct\", function () {",
							"    pm.expect(createdTaskDate).to.eql(currentDate);",
							"});",
							"",
							"pm.test(\"Token provided\", function () {",
							"    pm.expect(jsonData.id_token).to.exist;",
							"});",
							"",
							"pm.environment.set('token', jsonData.id_token)",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "dd1ff735-aa3d-421a-9836-65ae31e71699",
						"exec": [
							"let moment = require('moment');\r",
							"let currentDate = moment().utc().format('LLL');\r",
							"\r",
							"pm.variables.set('currentDate', currentDate);"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "bcda4c08-9cb6-4fad-af19-77bb747d7bfe",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com"
					},
					{
						"key": "Referer",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{adminLogin}}\",\r\n    \"password\": \"{{adminPassword}}\",\r\n    \"rememberMe\": false\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4e51baa6-f638-4672-9995-b0155626579d",
						"exec": [
							"let jsonData = pm.response.json();",
							"let moment = require('moment');",
							"let createdTaskDate = moment(pm.response.headers.get('Date')).utc().format('LLL');",
							"let currentDate = pm.variables.get('currentDate');",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    pm.expect(jsonData).to.exist;",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    pm.response.to.have.header(\"Date\");",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    pm.response.to.have.header(\"Content-Encoding\");",
							"});",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Task test is correct\", function () {",
							"    pm.expect(jsonData.text).to.eql(\"some text\");",
							"});",
							"",
							"pm.collectionVariables.set(\"taskId\", jsonData.id)",
							"",
							"pm.test(\"Date in response header is correct\", function () {",
							"    pm.expect(createdTaskDate).to.eql(currentDate);",
							"});",
							"",
							"//console.log(createdTaskDate);",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b1480f95-9591-4342-baa4-c70efc157da6",
						"exec": [
							"let moment = require('moment');\r",
							"let currentDate = moment().utc().format('LLL');\r",
							"\r",
							"pm.variables.set('currentDate', currentDate);\r",
							"pm.collectionVariables.set('taskText', 'some text');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "043cd0e4-82a8-422c-8414-93d26bd34c65",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"{{taskText}}\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fd6c9e7d-3150-4b63-8870-59d6a551a8f0",
						"exec": [
							"let moment = require('moment');\r",
							"let currentDate = moment().utc().format('LLL');\r",
							"\r",
							"pm.variables.set('currentDate', currentDate);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8eeae41a-89af-4b68-9fc6-eef5e947d6ef",
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let moment = require('moment');\r",
							"let createdTaskDate = moment(pm.response.headers.get('Date')).utc().format('LLL');\r",
							"let currentDate = pm.variables.get('currentDate');\r",
							"let taskId = pm.collectionVariables.get('taskId')\r",
							"\r",
							"pm.test(\"response is JSON\", function () {\r",
							"    pm.expect(jsonData).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Encoding is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Encoding\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Date in response header is correct\", function () {\r",
							"    pm.expect(createdTaskDate).to.eql(currentDate);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Saved taskId is in the task list\", function () {\r",
							"    pm.expect(jsonData.some(item => item.id === taskId)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "383f7c09-c585-470a-82b4-04d44c462aff",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=300",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "06f2a80d-00b0-48df-aae6-6fc8ccbf584c",
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let moment = require('moment');\r",
							"let createdTaskDate = moment(pm.response.headers.get('Date')).utc().format('LLL');\r",
							"let currentDate = pm.variables.get('currentDate');\r",
							"let taskId = pm.environment.get('taskId');\r",
							"let taskTextUpdated = pm.collectionVariables.get('taskTextUpdated');\r",
							"\r",
							"pm.test(\"response is JSON\", function () {\r",
							"    pm.expect(jsonData).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Date is present\", function () {\r",
							"    pm.response.to.have.header(\"Date\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Encoding is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Encoding\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Date in response header is correct\", function () {\r",
							"    pm.expect(createdTaskDate).to.eql(currentDate);\r",
							"});\r",
							"\r",
							"pm.test(\"Updated task text is correct\", function () {\r",
							"    pm.expect(jsonData.text).to.eql(taskTextUpdated);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c2d75319-c0e6-44ed-a26a-b37d4c940175",
						"exec": [
							"let moment = require('moment');\r",
							"let currentDate = moment().utc().format('LLL');\r",
							"let jsonBody = JSON.parse(pm.request.body);\r",
							"\r",
							"pm.variables.set('currentDate', currentDate);\r",
							"pm.collectionVariables.set('taskTextUpdated', 'new task text');\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "91bea036-9e7a-4a0e-9704-8a1c5cdac78b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{taskId}}\",\n  \"text\": \"{{taskTextUpdated}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{taskId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{taskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "237ed619-03cb-42d0-afbf-a531495e85a1",
						"exec": [
							"let jsonData = pm.response.json();",
							"let moment = require('moment');",
							"let createdTaskDate = moment(pm.response.headers.get('Date')).utc().format('LLL');",
							"let currentDate = pm.variables.get('currentDate');",
							"let taskId = pm.collectionVariables.get('taskId');",
							"",
							"let taskIdResponse = jsonData.id;",
							"let taskTextResponse = jsonData.text;",
							"let taskTextUpdated = pm.collectionVariables.get('taskTextUpdated'); ",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    pm.expect(jsonData).to.exist;",
							"});",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Date is present\", function () {",
							"    pm.response.to.have.header(\"Date\");",
							"});",
							"",
							"pm.test(\"Content-Encoding is present\", function () {",
							"    pm.response.to.have.header(\"Content-Encoding\");",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Date in response header is correct\", function () {",
							"    pm.expect(createdTaskDate).to.eql(currentDate);",
							"});",
							"",
							"pm.test(\"Task id is correct \", function () {",
							"    pm.expect(taskId).to.eql(taskIdResponse);",
							"});",
							"",
							"pm.test(\"Task text is correct \", function () {",
							"    pm.expect(taskTextUpdated).to.eql(taskTextResponse);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// pm.sendRequest(",
							"//     {url: 'https://sqlverifier-50d286d70656.herokuapp.com/api/tasks/3070',",
							"//     method: 'DELETE',",
							"//     header:",
							"//     {'Authorization': 'Bearer ' + pm.environment.get('token'),",
							"//     'accept': '*/*'}",
							"//     }",
							"//     , function (err, response) {",
							"//     console.log(response);",
							"// });",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9954a9de-f8d0-4ac7-8afe-2e923d57d5b3",
						"exec": [
							"let moment = require('moment');\r",
							"let currentDate = moment().utc().format('LLL');\r",
							"\r",
							"pm.variables.set('currentDate', currentDate);"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "5a0b275a-1c65-4037-b066-6ebeeeb3f004",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{taskId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{taskId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "3fd24959-ab31-4958-8d1e-f8fe9f9079b7"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "a5344a78-f466-4f37-bbbb-38b8323fb57a"
			}
		}
	],
	"variable": [
		{
			"id": "09c00bc4-8d7b-4fbf-ab7c-8c6125ee3813",
			"key": "taskText",
			"value": ""
		},
		{
			"id": "b8008077-b97d-416a-a30b-3e4f23e9ecc1",
			"key": "taskId",
			"value": ""
		},
		{
			"id": "aa104cf4-df57-4e0c-9418-da31fbc93917",
			"key": "taskTextUpdated",
			"value": ""
		}
	]
}